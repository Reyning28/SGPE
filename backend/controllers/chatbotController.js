const OpenAI = require('openai');

// Configurar OpenAI solo si la API key est√° disponible
let openai = null;
if (process.env.OPENAI_API_KEY) {
  openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });
}

// Contexto del sistema para el chatbot
const SYSTEM_CONTEXT = `
Eres un asistente virtual para el Sistema de Gesti√≥n de Peque√±as Empresas (SGPE). 
Tu funci√≥n es ayudar a los usuarios con:

1. Gesti√≥n de clientes: crear, buscar, actualizar informaci√≥n de clientes
2. Productos: gestionar inventario, precios, categor√≠as
3. Facturaci√≥n: crear facturas, consultar ventas, reportes
4. Navegaci√≥n del sistema: explicar c√≥mo usar las diferentes funciones

Caracter√≠sticas del sistema:
- Es un sistema web de gesti√≥n empresarial
- Incluye m√≥dulos de clientes, productos y facturaci√≥n
- Permite generar reportes de ventas
- Interfaz amigable con dashboard

Responde de manera √∫til, concisa y profesional. Si no sabes algo espec√≠fico sobre el sistema, 
sugiere al usuario contactar al administrador o revisar la documentaci√≥n.
`;

// Historial de conversaciones por usuario (en producci√≥n usar una BD)
const conversationHistory = new Map();

const chatbotController = {
  // Funci√≥n para generar respuestas b√°sicas sin IA
  getBasicResponse: function(message) {
    const lowerMessage = message.toLowerCase().trim();
    
    // Respuestas de cortes√≠a y agradecimientos
    if (lowerMessage.includes('gracias') || lowerMessage.includes('thank') || lowerMessage.includes('muchas gracias')) {
      return `¬°De nada! üòä Es un placer ayudarte con el sistema SGPE.

¬øHay algo m√°s en lo que pueda asistirte? Puedo ayudarte con:
‚Ä¢ Gesti√≥n de clientes
‚Ä¢ Control de inventario  
‚Ä¢ Proceso de facturaci√≥n
‚Ä¢ Navegaci√≥n del sistema`;
    }

    if (lowerMessage.includes('hola') || lowerMessage.includes('buenos') || lowerMessage.includes('buenas') || lowerMessage.includes('saludos')) {
      return `¬°Hola! üëã Bienvenido al asistente virtual de SGPE.

Estoy aqu√≠ para ayudarte con todas las funciones del sistema:

üìã **¬øEn qu√© puedo ayudarte hoy?**
‚Ä¢ Gesti√≥n de clientes
‚Ä¢ Control de inventario
‚Ä¢ Proceso de facturaci√≥n  
‚Ä¢ Navegaci√≥n del sistema
‚Ä¢ Reportes y consultas

Solo preg√∫ntame lo que necesites. ¬øPor d√≥nde empezamos?`;
    }

    if (lowerMessage.includes('adios') || lowerMessage.includes('adi√≥s') || lowerMessage.includes('bye') || lowerMessage.includes('hasta')) {
      return `¬°Hasta pronto! üëã 

Ha sido un gusto ayudarte con el sistema SGPE. Recuerda que estoy disponible 24/7 para cualquier consulta.

¬°Que tengas un excelente d√≠a! üòä`;
    }
    
    // Respuestas sobre clientes
    if (lowerMessage.includes('cliente') || lowerMessage.includes('crear cliente')) {
      return `üìã **GESTI√ìN DE CLIENTES - SGPE**

üîπ **Para crear un nuevo cliente:**
1. Ve al m√≥dulo **"Clientes"** en el men√∫ lateral
2. Haz clic en **"Nuevo Cliente"** o el bot√≥n **"+"**
3. Completa los datos requeridos:
   ‚Ä¢ Nombre completo
   ‚Ä¢ Email (debe ser √∫nico)
   ‚Ä¢ Tel√©fono
   ‚Ä¢ Direcci√≥n
4. Haz clic en **"Guardar"**

‚úÖ **El sistema validar√° autom√°ticamente:**
‚Ä¢ Email √∫nico en la base de datos
‚Ä¢ Campos obligatorios completos
‚Ä¢ Formato correcto de datos

üí° **Tip:** Puedes buscar y editar clientes existentes desde la misma secci√≥n.`;
    }
    
    // Respuestas sobre facturaci√≥n
    if (lowerMessage.includes('factura') || lowerMessage.includes('facturar') || lowerMessage.includes('venta') || lowerMessage.includes('ventas')) {
      return `üí∞ **FACTURACI√ìN - SGPE**

üîπ **Para generar una nueva factura:**
1. Ve al m√≥dulo **"Facturaci√≥n"**
2. Selecciona el **cliente** de la lista
3. Agrega **productos/servicios:**
   ‚Ä¢ Busca el producto
   ‚Ä¢ Define cantidad
   ‚Ä¢ Verifica precio unitario
4. El sistema calcular√° **autom√°ticamente:**
   ‚Ä¢ Subtotal por producto
   ‚Ä¢ Total general
   ‚Ä¢ Impuestos (si aplican)
5. Haz clic en **"Generar Factura"**

üìä **Funciones adicionales:**
‚Ä¢ Consultar historial de facturas
‚Ä¢ Imprimir o exportar facturas
‚Ä¢ Ver estad√≠sticas de ventas

üí° **Tip:** Puedes filtrar facturas por fecha, cliente o monto.`;
    }
    
    // Respuestas espec√≠ficas sobre control de inventario
    if (lowerMessage.includes('control de inventario') || lowerMessage.includes('control del inventario')) {
      return `üì¶ **CONTROL DE INVENTARIO - SGPE**

üîπ **Funciones principales del control de inventario:**

üìä **Monitoreo en tiempo real:**
‚Ä¢ Visualizaci√≥n del stock actual
‚Ä¢ Alertas autom√°ticas de bajo inventario
‚Ä¢ Historial completo de movimientos
‚Ä¢ Trazabilidad de productos

üîÑ **Gesti√≥n de movimientos:**
‚Ä¢ Entradas de mercanc√≠a
‚Ä¢ Salidas por ventas
‚Ä¢ Ajustes de inventario
‚Ä¢ Transferencias entre ubicaciones

üìà **Reportes y an√°lisis:**
‚Ä¢ Productos m√°s vendidos
‚Ä¢ An√°lisis de rotaci√≥n
‚Ä¢ Valorizaci√≥n del inventario
‚Ä¢ Productos con bajo stock

‚öôÔ∏è **Configuraciones:**
‚Ä¢ Establecer puntos de reorden
‚Ä¢ Definir stock m√≠nimo y m√°ximo
‚Ä¢ Categorizaci√≥n de productos
‚Ä¢ C√≥digos y SKUs

üí° **Tip:** Revisa regularmente los reportes de inventario para optimizar tus compras y evitar faltantes.`;
    }
    
    // Respuestas sobre productos e inventario general
    if (lowerMessage.includes('producto') || lowerMessage.includes('inventario') || lowerMessage.includes('agregar producto') || 
        lowerMessage.includes('stock') || lowerMessage.includes('almacen') || 
        lowerMessage.includes('almac√©n') || lowerMessage.includes('gesti√≥n de productos') || lowerMessage.includes('productos')) {
      return `üì¶ **GESTI√ìN DE PRODUCTOS - SGPE**

üîπ **Para agregar un nuevo producto:**
1. Ve al m√≥dulo **"Inventario"** o **"Productos"**
2. Haz clic en **"Nuevo Producto"** o **"+"**
3. Completa la informaci√≥n:
   ‚Ä¢ **Nombre** del producto
   ‚Ä¢ **Descripci√≥n** detallada
   ‚Ä¢ **Precio** de venta
   ‚Ä¢ **Precio** de compra (opcional)
   ‚Ä¢ **Categor√≠a**
   ‚Ä¢ **Stock** inicial
   ‚Ä¢ **C√≥digo** o SKU (opcional)
4. Guarda los cambios

üìä **Funciones del inventario:**
‚Ä¢ Control de stock en tiempo real
‚Ä¢ Alertas de productos con bajo inventario
‚Ä¢ Historial de movimientos
‚Ä¢ Categorizaci√≥n de productos
‚Ä¢ B√∫squeda r√°pida por nombre/c√≥digo

üí° **Tip:** Mant√©n actualizado el stock para un mejor control de ventas.`;
    }

    // Respuestas sobre el dashboard
    if (lowerMessage.includes('dashboard') || lowerMessage.includes('panel') || lowerMessage.includes('inicio')) {
      return `üè† **DASHBOARD - SGPE**

El panel principal te muestra un resumen completo del negocio:

üìä **M√©tricas principales:**
‚Ä¢ Total de ventas del per√≠odo
‚Ä¢ N√∫mero de clientes registrados
‚Ä¢ Productos en inventario
‚Ä¢ Facturas generadas

üìà **Gr√°ficos y estad√≠sticas:**
‚Ä¢ Ventas por per√≠odo
‚Ä¢ Productos m√°s vendidos
‚Ä¢ Tendencias de facturaci√≥n
‚Ä¢ Estado del inventario

üöÄ **Accesos r√°pidos:**
‚Ä¢ Crear nueva factura
‚Ä¢ Registrar cliente
‚Ä¢ Agregar producto
‚Ä¢ Ver reportes

üí° **Tip:** El dashboard se actualiza autom√°ticamente con los datos m√°s recientes.`;
    }

    // Respuestas sobre ayuda general
    if (lowerMessage.includes('ayuda') || lowerMessage.includes('help') || lowerMessage.includes('como usar') || lowerMessage.includes('qu√© es sgpe')) {
      return `ü§ñ **ASISTENTE VIRTUAL - SGPE**

¬°Hola! Soy tu asistente virtual del Sistema de Gesti√≥n de Peque√±as Empresas.

üîπ **¬øQu√© es SGPE?**
Un sistema completo para gestionar tu negocio que incluye:

üìã **M√≥dulos principales:**
‚Ä¢ **Clientes:** Gesti√≥n completa de clientes
‚Ä¢ **Inventario:** Control de productos y stock  
‚Ä¢ **Facturaci√≥n:** Generar ventas y facturas
‚Ä¢ **Dashboard:** Panel de control y estad√≠sticas

üí¨ **¬øC√≥mo puedo ayudarte?**
Puedes preguntarme sobre:
‚Ä¢ "¬øC√≥mo crear un cliente?"
‚Ä¢ "¬øC√≥mo generar una factura?"
‚Ä¢ "¬øC√≥mo agregar productos?"
‚Ä¢ "¬øC√≥mo usar el dashboard?"

üéØ **Tambi√©n puedes usar los botones de acci√≥n r√°pida** para consultas frecuentes.

¬°Preg√∫ntame lo que necesites! üòä`;
    }

    // Respuestas sobre reportes
    if (lowerMessage.includes('reporte') || lowerMessage.includes('estadistica') || lowerMessage.includes('consulta')) {
      return `üìä **REPORTES Y ESTAD√çSTICAS - SGPE**

üîπ **Tipos de reportes disponibles:**

üìà **Ventas:**
‚Ä¢ Ventas por per√≠odo (d√≠a, semana, mes)
‚Ä¢ Comparativa entre per√≠odos
‚Ä¢ Productos m√°s vendidos
‚Ä¢ Clientes con m√°s compras

üì¶ **Inventario:**
‚Ä¢ Stock actual por producto
‚Ä¢ Productos con bajo inventario
‚Ä¢ Movimientos de stock
‚Ä¢ Valorizaci√≥n del inventario

üë• **Clientes:**
‚Ä¢ Lista completa de clientes
‚Ä¢ Historial de compras por cliente
‚Ä¢ Clientes m√°s activos

üí∞ **Financiero:**
‚Ä¢ Ingresos totales
‚Ä¢ An√°lisis de rentabilidad
‚Ä¢ Facturas pendientes

üí° **Tip:** Los reportes se pueden filtrar por fechas y exportar para an√°lisis externos.`;
    }

    // Respuesta por defecto
    return `¬°Hola! üëã Soy el asistente virtual de SGPE.

Puedo ayudarte con informaci√≥n sobre:
‚Ä¢ **Gesti√≥n de clientes** - crear, editar, consultar
‚Ä¢ **Control de inventario** - productos, stock, precios
‚Ä¢ **Proceso de facturaci√≥n** - generar ventas y facturas
‚Ä¢ **Navegaci√≥n del sistema** - c√≥mo usar cada m√≥dulo
‚Ä¢ **Reportes y consultas** - estad√≠sticas y an√°lisis

¬øSobre qu√© te gustar√≠a saber m√°s? üòä

*Tip: Tambi√©n puedes usar los botones de acci√≥n r√°pida para consultas frecuentes.*`;
  },

  // Enviar mensaje al chatbot
  sendMessage: async (req, res) => {
    try {
      const { message, userId = 'anonymous' } = req.body;

      if (!message) {
        return res.status(400).json({
          success: false,
          message: 'El mensaje es requerido'
        });
      }

      // Verificar si la API key est√° configurada
      if (!process.env.OPENAI_API_KEY || !openai) {
        // Respuesta b√°sica sin IA
        const basicResponse = chatbotController.getBasicResponse(message);
        return res.json({
          success: true,
          message: 'Respuesta generada (modo b√°sico)',
          response: basicResponse,
          timestamp: new Date().toISOString()
        });
      }

      // Obtener o crear historial para el usuario
      if (!conversationHistory.has(userId)) {
        conversationHistory.set(userId, [
          { role: 'system', content: SYSTEM_CONTEXT }
        ]);
      }

      const userHistory = conversationHistory.get(userId);
      
      // Agregar mensaje del usuario al historial
      userHistory.push({ role: 'user', content: message });

      // Limitar historial a √∫ltimos 10 mensajes (para evitar exceder l√≠mites)
      if (userHistory.length > 11) { // 1 system + 10 mensajes
        userHistory.splice(1, userHistory.length - 11);
      }

      // Hacer petici√≥n a OpenAI
      const completion = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: userHistory,
        max_tokens: 500,
        temperature: 0.7,
      });

      const botResponse = completion.choices[0].message.content;

      // Agregar respuesta del bot al historial
      userHistory.push({ role: 'assistant', content: botResponse });

      res.json({
        success: true,
        message: 'Respuesta generada exitosamente',
        response: botResponse,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('Error en chatbot:', error);
      
      // Respuesta de fallback si falla la API
      const fallbackResponse = `Lo siento, no pude procesar tu mensaje en este momento. 
      
Puedes intentar:
- Reformular tu pregunta
- Revisar la secci√≥n de ayuda del sistema
- Contactar al administrador

¬øEn qu√© m√°s puedo ayudarte con el sistema SGPE?`;

      res.status(500).json({
        success: false,
        message: 'Error al procesar mensaje',
        response: fallbackResponse,
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  },

  // Limpiar historial de conversaci√≥n
  clearHistory: (req, res) => {
    try {
      const { userId = 'anonymous' } = req.body;
      
      conversationHistory.set(userId, [
        { role: 'system', content: SYSTEM_CONTEXT }
      ]);

      res.json({
        success: true,
        message: 'Historial de conversaci√≥n limpiado'
      });
    } catch (error) {
      console.error('Error limpiando historial:', error);
      res.status(500).json({
        success: false,
        message: 'Error al limpiar historial'
      });
    }
  },

  // Obtener estado del chatbot
  getStatus: (req, res) => {
    res.json({
      success: true,
      status: 'online',
      hasApiKey: !!process.env.OPENAI_API_KEY,
      activeConversations: conversationHistory.size,
      timestamp: new Date().toISOString()
    });
  }
};

module.exports = chatbotController;
